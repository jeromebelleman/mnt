#! /usr/bin/env python

import os
import sys
import subprocess as sp
import argparse
import shlex
import re
import errno 
from getpass import getpass

UNLOSETUP = '/sbin/losetup -d %s'
UNCRYPTSETUP = '/sbin/cryptsetup luksClose %s'

class ExecError(Exception):
    pass

def ex(cmd, input=None):
    args = shlex.split(cmd)
    try:
        p = sp.Popen(args, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
    except KeyboardInterrupt:
        return
    stdout, stderr = p.communicate(input)
    if p.returncode != 0:
        out = stderr if len(stderr) > 0 else stdout
        raise ExecError('[%s] %s' % (os.path.basename(args[0]), out[:-1]))
    return stdout, stderr

def main():
    # Arguments
    parser = argparse.ArgumentParser()
    help = "mount FILE's filesystem"
    parser.add_argument('-m', '--mount', dest='file', nargs='+', help=help,
                        default=[])
    help = "umount filesystem from MOUNTPOINT"
    parser.add_argument('-u', '--umount', dest='mountpoint', nargs='+',
                        help=help, default=[])
    args = parser.parse_args()

    if not args.file and not args.mountpoint:
        parser.print_help()
        return

    # Sanitise input
    exists = True
    for i in args.file + args.mountpoint:
        if not os.path.exists(i):
            strerr = os.strerror(errno.ENOENT)
            print >>sys.stderr, '%s: %s' % (i, strerr)
            exists = False
    if not exists:
        return 1

    # Mount Actions
    passphrase = None
    for i, f in enumerate(args.file):
        if len(args.file) > 1:
            basefile = os.path.basename(os.path.abspath(f)) + str(i)
        else:
            basefile = os.path.basename(os.path.abspath(f))

        try:
            # Find first unused loop device
            loopdev, _ = ex('/sbin/losetup -f')

            # Attach loop device
            ex('/sbin/losetup %s %s' % (loopdev, f))
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        try:
            # Prompt and store passphrase
            if not passphrase:
                passphrase = getpass('Enter passphrase for %s: ' % basefile)

            # Device-map loop device
            ex('/sbin/cryptsetup -T 1 -d - luksOpen %s %s' % \
                (loopdev, basefile), passphrase)
        except ExecError, e:
            print >>sys.stderr, e
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except:
                print >>sys.stderr, e
            return 1
        except KeyboardInterrupt:
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e
            print
            return 1

        # Create a mount point
        mp = '/media/%s' % basefile
        try:
            os.mkdir(mp)
        except OSError, e:
            print >>sys.stderr, '[mkdir] %s: %s' % (e.strerror, e.filename)
            try:
                # Device-unmap loop device
                ex(UNCRYPTSETUP % basefile)

                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e

            return 1

        try:
            # Mount now decrypted file system
            ex('/bin/mount /dev/mapper/%s %s' % (basefile, mp))
        except ExecError, e:
            print >>sys.stderr, e
            try:
                # Remove mount point
                os.rmdir(mp)

                # Device-unmap loop device
                ex(UNCRYPTSETUP % basefile)

                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e
            except OSError, e:
                print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)

            return 1

    # Umount Actions
    for f in args.mountpoint:
        basefile = os.path.basename(os.path.abspath(f))

        # Find out which loop device we're dealing with
        try:
            stdout, _ = ex('/sbin/cryptsetup status %s' % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1
        r = re.compile('.*  device:  (?P<loopdev>/dev/loop\d+).*', re.S)
        m = r.match(stdout)
        if m is not None:
            loopdev = m.group('loopdev')
        else:
            msg = "No loop device seems to be mapped to %s"
            print >>sys.stderr, msg % basefile
            return 1

        try:
            # Umount now decrypted file system
            ex('/bin/umount %s' % f)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        # Remove mount point
        try:
            os.rmdir(f)
        except OSError, e:
            print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)
            return 1

        try:
            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        try:
            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

if __name__ == '__main__':
    sys.exit(main())
