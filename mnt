#! /usr/bin/env python

import os
from os.path import dirname, expanduser
import sys
import subprocess as sp
import argparse
import shlex
import cmd
import re
import errno 
import signal
from getpass import getpass

UNLOSETUP = '/sbin/losetup -d %s'
UNCRYPTSETUP = '/sbin/cryptsetup luksClose %s'
MHELP = "mount FILE's filesystem"
RHELP = "mount filesystem read-only"
UHELP = "umount filesystem from MOUNTPOINT"

class ExecError(Exception):
    pass

def filetype(path, e):
    if os.path.isdir(expanduser(path + '/' + e)):
        return e + '/'
    else:
        return e

def filecomp(args, text):
    path = dirname(args[-1]) if dirname(args[-1]) else '.'
    return [filetype(path, e) for e in os.listdir(expanduser(path))
            if e.startswith(text)]

class Cli(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = 'mnt% '

        self.pm = argparse.ArgumentParser()
        self.pm.add_argument(dest='file', nargs='+', help=MHELP)
        self.pm.add_argument('-r', '--read-only', action='store_true',
                             help=RHELP)

        self.pu = argparse.ArgumentParser()
        self.pu.add_argument(dest='mountpoint', nargs='+', help=UHELP)

        self.passphrase = None
        signal.signal(signal.SIGALRM, self.handler)

    def handler(self, signum, frame):
        self.passphrase = None

    def emptyline(self):
        pass

    def do_mount(self, line):
        try:
            args = self.pm.parse_args(shlex.split(line))
        except SystemExit:
            return
        self.passphrase = mount(args.file, args.read_only, self.passphrase)
        signal.alarm(60 * 60) # Forget passphrase after 1 hour

    def complete_mount(self, text, line, begidx, endidx):
        # For some reason 'text' drops words by slash
        # FIXME Complete from current word rather than last word
        args = shlex.split(line)
        if len(args) > 1:
            return filecomp(args, text)
        else:
            return [e for e in os.listdir('.')]

    def help_mount(self):
       self.pm.print_help() 

    def do_umount(self, line):
        try:
            args = self.pu.parse_args(shlex.split(line))
        except SystemExit:
            return
        umount(args.mountpoint)

    def complete_umount(self, text, line, begidx, endidx):
        # For some reason 'text' drops words by slash
        # FIXME Complete from current word rather than last word
        args = shlex.split(line)
        if len(args) > 1:
            return filecomp(args, text)
        else:
            return ['/media/' + e for e in os.listdir('/media')]

    def help_umount(self):
       self.pu.print_help() 

    def do_EOF(self, _):
        print
        sys.exit(0)

    def help_EOF(self):
        print "Exit"

    def help_help(self):
        print "Display help"

def ex(cmd, input=None):
    args = shlex.split(cmd)
    try:
        p = sp.Popen(args, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
    except KeyboardInterrupt:
        return
    stdout, stderr = p.communicate(input)
    if p.returncode != 0:
        out = stderr if len(stderr) > 0 else stdout
        raise ExecError('[%s] %s' % (os.path.basename(args[0]), out[:-1]))
    return stdout, stderr

def mount(files, read_only, passphrase=None):
    for i, f in enumerate([expanduser(f) for f in files]):
        if len(files) > 1:
            basefile = os.path.basename(os.path.abspath(f)) + str(i)
        else:
            basefile = os.path.basename(os.path.abspath(f))

        try:
            # Find first unused loop device
            loopdev, _ = ex('/sbin/losetup -f')

            # Attach loop device
            ex('/sbin/losetup %s %s' % (loopdev, f))
        except ExecError, e:
            print >>sys.stderr, e
            return

        try:
            # Prompt and store passphrase
            if not passphrase:
                passphrase = getpass('Enter passphrase for %s: ' % basefile)

            # Device-map loop device
            ex('/sbin/cryptsetup -T 1 -d - luksOpen %s %s' % \
                (loopdev, basefile), passphrase)
        except ExecError, e:
            print >>sys.stderr, e
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except:
                print >>sys.stderr, e
            return
        except KeyboardInterrupt:
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e
            print
            return

        # Create a mount point
        mp = '/media/%s' % basefile
        try:
            os.mkdir(mp)
        except OSError, e:
            print >>sys.stderr, '[mkdir] %s: %s' % (e.strerror, e.filename)
            try:
                # Device-unmap loop device
                ex(UNCRYPTSETUP % basefile)

                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e

            return

        try:
            # Mount now decrypted file system
            ro = '-r' if read_only else ''
            ex('/bin/mount %s /dev/mapper/%s %s' % (ro, basefile, mp))
        except ExecError, e:
            print >>sys.stderr, e
            try:
                # Remove mount point
                os.rmdir(mp)

                # Device-unmap loop device
                ex(UNCRYPTSETUP % basefile)

                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e
            except OSError, e:
                print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)

            return

    return passphrase

def umount(mountpoints):
    for f in mountpoints:
        basefile = os.path.basename(os.path.abspath(f))

        # Find out which loop device we're dealing with
        try:
            stdout, _ = ex('/sbin/cryptsetup status %s' % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1
        r = re.compile('.*  device:  (?P<loopdev>/dev/loop\d+).*', re.S)
        m = r.match(stdout)
        if m is not None:
            loopdev = m.group('loopdev')
        else:
            msg = "No loop device seems to be mapped to %s"
            print >>sys.stderr, msg % basefile
            return 1

        try:
            # Umount now decrypted file system
            ex('/bin/umount %s' % f)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        # Remove mount point
        try:
            os.rmdir(f)
        except OSError, e:
            print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)
            return 1

        try:
            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        try:
            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

def main():
    # Arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--mount', dest='file', nargs='+', help=MHELP,
                        default=[])
    parser.add_argument('-r', '--read-only', action='store_true', help=RHELP)
    parser.add_argument('-u', '--umount', dest='mountpoint', nargs='+',
                        help=UHELP, default=[])
    args = parser.parse_args()

    # Start shell if no arguments
    if not args.file and not args.mountpoint:
        cli = Cli()
        while True:
            try:
                cli.cmdloop()
            except KeyboardInterrupt:
                print

    # Sanitise input
    exists = True
    for i in args.file + args.mountpoint:
        if not os.path.exists(i):
            strerr = os.strerror(errno.ENOENT)
            print >>sys.stderr, '%s: %s' % (i, strerr)
            exists = False
    if not exists:
        return 1

    # Mount Actions
    mount(args.file, args.read_only)

    # Umount Actions
    umount(args.mountpoint)

if __name__ == '__main__':
    sys.exit(main())
