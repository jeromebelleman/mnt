#! /usr/bin/env python

import os
from os.path import expanduser
import sys
import subprocess as sp
import argparse
import shlex
import cli
import re
import errno 
import signal
from getpass import getpass
import itertools
import ConfigParser

UNLOSETUP = '/sbin/losetup -d %s'
CRYPTSETUP = '/sbin/cryptsetup -T 1 -d - luksOpen %s %s'
UNCRYPTSETUP = '/sbin/cryptsetup luksClose %s'
MHELP = "mount FILE's filesystem"
WHELP = "mount filesystem read/write"
UHELP = "umount filesystem from MOUNTPOINT"
CHELP = "create SIZE MB filesystem in FILE"

class ExecError(Exception):
    pass

class CryptError(Exception):
    pass

def mkmp(basefile, loopdev):
    mp = '/media/%s' % basefile
    try:
        # Create a mount point
        os.mkdir(mp)
    except OSError, e:
        print >>sys.stderr, '[mkdir] %s: %s' % (e.strerror, e.filename)
        try:
            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)

            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e

        raise CryptError

    return mp

def mntfs(basefile, loopdev, mp, read_write=False):
    try:
        # Mount the now decrypted file system
        ro = '' if read_write else '-r'
        ex('/bin/mount %s /dev/mapper/%s %s' % (ro, basefile, mp))
    except ExecError, e:
        print >>sys.stderr, e
        try:
            # Remove mount point
            os.rmdir(mp)

            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)

            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e
        except OSError, e:
            print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)

        raise CryptError

def losetup(path):
    try:
        # Find first unused loop device
        loopdev, _ = ex('/sbin/losetup -f')

        # Attach loop device
        ex('/sbin/losetup %s %s' % (loopdev, path))
    except ExecError, e:
        print >>sys.stderr, e
        raise CryptError

    return loopdev

class Cli(cli.Cli):
    def __init__(self, timeout):
        cli.Cli.__init__(self)

        self.timeout = timeout

        self.mountparser.add_argument(dest='file', nargs='+')
        self.mountparser.add_argument('-w', '--read-write', action='store_true',
                                      help=WHELP)
        self.mountparser.description = MHELP

        self.umountparser.add_argument(dest='mountpoint', nargs='+')
        self.umountparser.description = UHELP

        self.createparser.add_argument(dest='file')
        self.createparser.add_argument(dest='size')
        self.createparser.description = CHELP

        self.passphrase = None
        signal.signal(signal.SIGALRM, self.handler)

    def handler(self, signum, frame):
        self.passphrase = None

    def run_mount(self, args):
        self.passphrase = mount(args.file, args.read_write, self.passphrase)
        signal.alarm(self.timeout) # Forget passphrase after some time

    def run_umount(self, args):
        umount(args.mountpoint)

    def run_create(self, args):
        self.passphrase = create(args.file, args.size, self.passphrase)
        signal.alarm(60 * 60) # Forget passphrase after 1 hour

def ex(cmd, input=None):
    args = shlex.split(cmd)
    try:
        p = sp.Popen(args, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
    except KeyboardInterrupt:
        return
    stdout, stderr = p.communicate(input)
    if p.returncode != 0:
        out = stderr if len(stderr) > 0 else stdout
        raise ExecError('[%s] %s' % (os.path.basename(args[0]), out[:-1]))
    return stdout, stderr

def mount(files, read_write, passphrase=None):
    for i, f in enumerate([expanduser(f) for f in files]):
        # Set unique basefile 
        basefile = os.path.basename(os.path.abspath(f))
        j, suffix = 0, ''
        while os.path.isdir('/media/%s%s' % (basefile, suffix)):
            suffix = str(j)
            j += 1
        basefile = basefile + suffix

        try:
            loopdev = losetup(f)
        except CryptError:
            return

        try:
            # Prompt and store passphrase
            if not passphrase:
                passphrase = getpass('Enter passphrase for %s: ' % basefile)

            # Device-map loop device
            ex(CRYPTSETUP % (loopdev, basefile), passphrase)
        except ExecError, e:
            print >>sys.stderr, e
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except:
                print >>sys.stderr, e
            return
        except KeyboardInterrupt:
            try:
                # Detach loop device
                ex(UNLOSETUP % loopdev)
            except ExecError, e:
                print >>sys.stderr, e
            print
            return

        try:
            mp = mkmp(basefile, loopdev)
        except CryptError:
            return

        try:
            mntfs(basefile, loopdev, mp, read_write)
        except CryptError:
            return

    return passphrase

def umount(mountpoints):
    for f in mountpoints:
        basefile = os.path.basename(os.path.abspath(f))

        # Find out which loop device we're dealing with
        try:
            stdout, _ = ex('/sbin/cryptsetup status %s' % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1
        r = re.compile('.*  device:  (?P<loopdev>/dev/loop\d+).*', re.S)
        m = r.match(stdout)
        if m is not None:
            loopdev = m.group('loopdev')
        else:
            msg = "No loop device seems to be mapped to %s"
            print >>sys.stderr, msg % basefile
            return 1

        try:
            # Umount file system
            ex('/bin/umount %s' % f)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        # Remove mount point
        try:
            os.rmdir(f)
        except OSError, e:
            print >>sys.stderr, '[rmdir] %s: %s' % (e.strerror, e.filename)
            return 1

        try:
            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

        try:
            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e
            return 1

def create(path, size, passphrase=None):
    try:
        # Fill new file with random data
        ex('/bin/dd if=/dev/urandom of=%s bs=1M count=%d' % (path, int(size)))
    except ExecError, e:
        print >>sys.stderr, e
        return

    try:
        loopdev = losetup(path)
    except CryptError:
        return

    basefile = os.path.basename(os.path.abspath(path))

    try:
        # Prompt and store passphrase
        if not passphrase:
            passphrase = getpass('Enter passphrase for %s: ' % basefile)

        # Initialise LUKS partition
        ex('/sbin/cryptsetup -d - luksFormat %s' % loopdev, passphrase)

        # Device-map loop device
        ex(CRYPTSETUP % (loopdev, basefile), passphrase)
    except (KeyboardInterrupt, ExecError), e:
        if isinstance(e, ExecError): 
            print >>sys.stderr, e
        try:
            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e

        return

    try:
        # Make filesystem
        ex('/sbin/mkfs.ext2 /dev/mapper/%s' % basefile)
    except ExecError, e:
        print >>sys.stderr, e
        
        try:
            # Device-unmap loop device
            ex(UNCRYPTSETUP % basefile)

            # Detach loop device
            ex(UNLOSETUP % loopdev)
        except ExecError, e:
            print >>sys.stderr, e
        
        return

    try:
        mp = mkmp(basefile, loopdev)
    except CryptError:
        return

    try:
        mntfs(basefile, loopdev, mp)
    except CryptError:
        return

    return passphrase

def main():
    # Arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--mount', dest='file', nargs='+', help=MHELP,
                        default=[])
    parser.add_argument('-w', '--read-write', action='store_true', help=WHELP)
    parser.add_argument('-u', '--umount', dest='mountpoint', nargs='+',
                        help=UHELP, default=[])
    parser.add_argument('-c', '--create', nargs=2, metavar=('FILE', 'SIZE'),
                        help=CHELP)
    args = parser.parse_args()

    # Config
    config = ConfigParser.SafeConfigParser()
    config.read(expanduser('~/.mnt.cfg'))
    try:
        timeout = config.getint('security', 'timeout')
    except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
        timeout = 43200

    # Start shell if no arguments
    if not args.file and not args.mountpoint and not args.create:
        cli = Cli(timeout)
        while True:
            try:
                cli.cmdloop()
            except KeyboardInterrupt:
                print

    # Sanitise input
    exists = True
    for i in args.file + args.mountpoint:
        if not os.path.exists(i):
            strerr = os.strerror(errno.ENOENT)
            print >>sys.stderr, '%s: %s' % (i, strerr)
            exists = False
    if not exists:
        return 1

    # Mount
    mount(args.file, args.read_write)

    # Umount
    umount(args.mountpoint)

    # Create
    if args.create:
        try:
            create(*args.create)
        except ValueError, e:
            msg = "mnt: error: argument -c/--create: invalid int value for SIZE"
            print >>sys.stderr, msg
            return 1

if __name__ == '__main__':
    sys.exit(main())
